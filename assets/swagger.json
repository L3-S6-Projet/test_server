{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "Scolendar",
    "description": "UE Projet - L3 Informatique AMU 2019-2020\nAll of the routes missing the `role-professor` or `role-student` tags are meant for administrators only - as stated in their descriptions."
  },
  "host": "localhost:3030",
  "basePath": "/api",
  "tags": [
    {
      "name": "auth"
    },
    {
      "name": "profile"
    },
    {
      "name": "teacher"
    },
    {
      "name": "classroom"
    },
    {
      "name": "classes"
    },
    {
      "name": "students"
    },
    {
      "name": "subjects"
    },
    {
      "name": "occupancies"
    },
    {
      "name": "role-professor"
    },
    {
      "name": "role-student"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/session": {
      "post": {
        "tags": [
          "auth",
          "role-student",
          "role-professor"
        ],
        "summary": "Logins the user to the application, returning a new auth token and the user role.",
        "operationId": "login",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "LoginRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Valid credentials",
            "schema": {
              "$ref": "#/definitions/SuccessfulLoginResponse"
            }
          },
          "401": {
            "description": "Invalid credentials (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "auth",
          "role-student",
          "role-professor"
        ],
        "summary": "Destroys the given auth token.",
        "operationId": "logout",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "token": []
          }
        ],
        "responses": {
          "200": {
            "description": "Valid token",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/profile": {
      "put": {
        "tags": [
          "profile",
          "role-student",
          "role-professor"
        ],
        "summary": "Updates the user model.",
        "description": "Should be accessible by every user.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "ProfileUpdateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProfileUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data updated",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Invalid old_password (code=`InvalidOldPassword`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Password too simple (code=`PasswordTooSimple`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/profile/last-occupancies-modifications": {
      "get": {
        "tags": [
          "role-student",
          "role-professor"
        ],
        "summary": "Returns a list of all recent occupancies modifications that are relevant to the user.",
        "description": "Modifications that are relevant are:\n- For a teacher: modifications of occupancies about a subject that they teach, or modifications of their own external occupancies.\n- For a student : modifications of occupancies about a subject that they take.\nOnly the last 25 modifications should be returned.",
        "security": [
          {
            "token": []
          }
        ],
        "responses": {
          "200": {
            "description": "Recent modifications",
            "schema": {
              "$ref": "#/definitions/ProfileRecentModifications"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/profile/feeds/ical": {
      "get": {
        "tags": [
          "role-student",
          "role-professor"
        ],
        "summary": "Gets the url to the ICAL feed of the user calendar.",
        "security": [
          {
            "token": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ICALFeed"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/teachers": {
      "get": {
        "tags": [
          "teacher"
        ],
        "summary": "Returns a paginated list of all teachers.",
        "description": "Note : only users with the role `administrator` should be able to access this route.\n10 teachers should be returned per page. If less than three characters are provided for the query, it will not be applied.\nWarning: the `email` and `phone_number` can be null.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all teachers.",
            "schema": {
              "$ref": "#/definitions/TeacherListResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "teacher"
        ],
        "summary": "Creates a new teacher.",
        "description": "Note : only users with the role `administrator` should be able to access this route.\n`email` and `phone_number` can be null in the request.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "TeacherCreationRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TeacherCreationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Teacher created.",
            "schema": {
              "$ref": "#/definitions/AccountCreatedResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Invalid email (code=`InvalidEmail`)\nInvalid phone number (code=`InvalidPhoneNumber`)\nInvalid rank (code=`InvalidRank`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "teacher"
        ],
        "summary": "Deletes the given teachers using their IDs.",
        "description": "Note : only users with the role `administrator` should be able to access this route.\nThis request should be denied if the professors are in charge of any subjects. This should cascade and delete any occupancies they are a part of, and remove them from any subjects they took part in.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "IDRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IDRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data deleted.",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID(s) (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "The teacher is still in charge of a subject (code=`TeacherInCharge`).",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/teachers/{id}": {
      "get": {
        "tags": [
          "teacher"
        ],
        "summary": "Gets information for a teacher",
        "description": "Note : only users with the role `administrator` should be able to access this route.\nWarning: the `email` and `phone_number` can be null.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Teacher ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Teacher information",
            "schema": {
              "$ref": "#/definitions/TeacherResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID(s) (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "teacher"
        ],
        "summary": "Updates information for a teacher.",
        "description": "Note : only users with the role `administrator` should be able to access this route.\nOnly filled fields should be updated. To remove the `phone_number` or `email` fields, pass `null`.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Teacher ID",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "TeacherUpdateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TeacherUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Teacher updated",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Invalid email (code=`InvalidEmail`)\nInvalid phone number (code=`InvalidPhoneNumber`)\nInvalid rank (code=`InvalidRank`)\nPassword too simple (code=`PasswordTooSimple`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/teachers/{id}/occupancies": {
      "get": {
        "tags": [
          "teacher",
          "role-professor"
        ],
        "summary": "Gets the occupancies of a teacher for the given time period.",
        "description": "Note : only users with the role `administrator`, or teachers whose id match the one in the URL should be able to access this route.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Teacher ID",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "start",
            "description": "Start timestamp of the occupancies",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "end",
            "description": "End timestamp of the occupancies",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "occupancies_per_day",
            "type": "integer",
            "description": "Pass 0 to return ALL the events.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Teacher occupancies",
            "schema": {
              "$ref": "#/definitions/Occupancies"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/teachers/{id}/subjects": {
      "get": {
        "tags": [
          "teacher",
          "role-professor"
        ],
        "summary": "Gets the list of all subjects that a teacher participates in.",
        "description": "Note : only teachers whose id match the one in the URL should be able to access this route.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Teacher ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Teacher subjects",
            "schema": {
              "$ref": "#/definitions/TeacherSubjects"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/classrooms": {
      "get": {
        "tags": [
          "classroom",
          "role-professor"
        ],
        "summary": "Returns a paginated list of all classrooms.",
        "description": "Note : only users with the role `administrator`, or professors, should be able to access this route.\n10 classrooms should be returned per page. If less than three characters are provided for the query, it will not be applied.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all classrooms.",
            "schema": {
              "$ref": "#/definitions/ClassroomsList"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "classroom"
        ],
        "summary": "Creates a new classroom.",
        "description": "Note : only users with the role `administrator` should be able to access this route.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "ClassroomCreationRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClassroomCreationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Classroom created.",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Invalid capacity (code=`InvalidCapacity`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "classroom"
        ],
        "summary": "Deletes the given classrooms using their IDs.",
        "description": "Note : only users with the role `administrator` should be able to access this route.\nThis request should be denied if the classroom is used in any occupancy.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "IDRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IDRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data deleted.",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID(s) (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Classroom is used in an occupancy (code=`ClassroomUsed`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/classrooms/{id}": {
      "get": {
        "tags": [
          "classroom"
        ],
        "summary": "Gets information for a classroom.",
        "description": "Note : only users with the role `administrator` should be able to access this route.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Classroom ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Classroom information",
            "schema": {
              "$ref": "#/definitions/ClassroomGetResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID(s) (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "classroom"
        ],
        "summary": "Updates information for a classroom.",
        "description": "Note : only users with the role `administrator` should be able to access this route.\nThe omission of the `capacity` field is not an error : it should not be able to be modified.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Classroom ID",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "ClassroomUpdateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClassroomUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Classroom updated",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/classrooms/{id}/occupancies": {
      "get": {
        "tags": [
          "classroom"
        ],
        "summary": "Gets the occupancies of a classroom for the given time period.",
        "description": "Note : only users with the role `administrator` should be able to access this route.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Classroom ID",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "start",
            "description": "Start timestamp of the occupancies",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "end",
            "description": "End timestamp of the occupancies",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "occupancies_per_day",
            "type": "integer",
            "description": "Pass 0 to return ALL the events.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Classroom occupancies",
            "schema": {
              "$ref": "#/definitions/Occupancies"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/classes": {
      "get": {
        "tags": [
          "classes"
        ],
        "summary": "Returns a paginated list of all classes.",
        "description": "Note : only users with the role `administrator` should be able to access this route.\n10 classes should be returned per page. At least three characters should be provided for the search, or the results won't be filtered.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all classes.",
            "schema": {
              "$ref": "#/definitions/ClassesList"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "classes"
        ],
        "summary": "Creates a new class.",
        "description": "Note : only users with the role `administrator` should be able to access this route.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "ClassCreationRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Class"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Class created.",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Invalid level (code=`InvalidLevel`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "classes"
        ],
        "summary": "Deletes the given classes using their IDs.",
        "description": "Note : only users with the role `administrator` should be able to access this route.\nThis request should be denied if the class is used in any subject, or if any student is in this class.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "IDRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IDRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data deleted.",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID(s) (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Class is still used by a subject (code=`ClassUsed`)\nA student is still in this class (code=`StudentInClass`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/classes/{id}": {
      "get": {
        "tags": [
          "classes"
        ],
        "summary": "Gets information for a class.",
        "description": "Note : only users with the role `administrator` should be able to access this route.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Class ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Class information",
            "schema": {
              "$ref": "#/definitions/ClassResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID(s) (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "classes"
        ],
        "summary": "Updates information for a class.",
        "description": "Note : only users with the role `administrator` should be able to access this route.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Class ID",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "ClassUpdateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClassUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Class updated",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Invalid level (code=`InvalidLevel`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/classes/{id}/occupancies": {
      "get": {
        "tags": [
          "classes"
        ],
        "summary": "Gets the occupancies of a class for the given time period.",
        "description": "Note : only users with the role `administrator` should be able to access this route.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Class ID",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "start",
            "description": "Start timestamp of the occupancies",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "end",
            "description": "End timestamp of the occupancies",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "occupancies_per_day",
            "type": "integer",
            "description": "Pass 0 to return ALL the events.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Class occupancies",
            "schema": {
              "$ref": "#/definitions/Occupancies"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid class ID (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/students": {
      "get": {
        "tags": [
          "students"
        ],
        "summary": "Returns a paginated list of all students.",
        "description": "Note : only users with the role `administrator` should be able to access this route.\n10 students should be returned per page. At least three characters should be provided for the search, or the results won't be filtered.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all students.",
            "schema": {
              "$ref": "#/definitions/StudentListResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "students"
        ],
        "summary": "Creates a new student.",
        "description": "Note : only users with the role `administrator` should be able to access this route. This should trigger the re-organization of groups.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "StudentCreationRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StudentCreationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Student created.",
            "schema": {
              "$ref": "#/definitions/AccountCreatedResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid class id (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "students"
        ],
        "summary": "Deletes the given students using their IDs.",
        "description": "Note : only users with the role `administrator` should be able to access this route.\nThis request should trigger the re-organization of students in the affected groups.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "IDRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IDRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data deleted.",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID(s) (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/students/{id}": {
      "get": {
        "tags": [
          "students"
        ],
        "summary": "Gets information for a student",
        "description": "Note : only users with the role `administrator` should be able to access this route.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Student ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Student information",
            "schema": {
              "$ref": "#/definitions/StudentResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID(s) (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "students"
        ],
        "summary": "Updates information for a student.",
        "description": "Note : only users with the role `administrator` should be able to access this route.\nOnly filled fields should be updated.\nThis should trigger the re-organization of groups.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Student ID",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "StudentUpdateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StudentUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Student updated",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID (code=`InvalidID`)\nInvalid class id (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Invalid password (code=`PasswordTooSimple`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/students/{id}/occupancies": {
      "get": {
        "tags": [
          "students",
          "role-student"
        ],
        "summary": "Gets the occupancies of a student for the given time period.",
        "description": "Note : only users with the role `administrator`, or students whose id match the one in the URL should be able to access this route.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Student ID",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "start",
            "description": "Start timestamp of the occupancies",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "end",
            "description": "End timestamp of the occupancies",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "occupancies_per_day",
            "type": "integer",
            "description": "Pass 0 to return ALL the events.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Student occupancies",
            "schema": {
              "$ref": "#/definitions/Occupancies"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/students/{id}/subjects": {
      "get": {
        "tags": [
          "students",
          "role-student"
        ],
        "summary": "Gets the list of all subjects that a student participates in.",
        "description": "Note : only students whose id match the one in the URL should be able to access this route.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Student ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Student subjects",
            "schema": {
              "$ref": "#/definitions/StudentSubjects"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subjects": {
      "get": {
        "tags": [
          "subjects"
        ],
        "summary": "Returns a paginated list of all subjects.",
        "description": "Note : only users with the role `administrator` should be able to access this route.\n10 subjects should be returned per page. At least three characters should be provided for the search, or the results won't be filtered.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all subjects.",
            "schema": {
              "$ref": "#/definitions/SubjectListResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "subjects"
        ],
        "summary": "Creates a new subject.",
        "description": "Note : only users with the role `administrator` should be able to access this route.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "SubjectCreationRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subject"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Subject created.",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid class id (code=`InvalidID`)\nInvalid teacher in charge id (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "subjects"
        ],
        "summary": "Deletes the given subjects using their IDs.",
        "description": "Note : only users with the role `administrator` should be able to access this route.\nThis request should be denied if the subject is used in any occupancy (be it directly, or via a group).",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "IDRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IDRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data deleted.",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID(s) (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Subject used in an occupancy (code=`SubjectUsed`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subjects/{id}": {
      "get": {
        "tags": [
          "subjects"
        ],
        "summary": "Gets information on a subject",
        "description": "Note : only users with the role `administrator` should be able to access this route.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Subject ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Subject information",
            "schema": {
              "$ref": "#/definitions/SubjectResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID(s) (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "subjects"
        ],
        "summary": "Updates information for a subject.",
        "description": "Note : only users with the role `administrator` should be able to access this route. The teacher designed by teacher_in_charge_id should already be a teacher of that subject.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Subject ID",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "SubjectUpdateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubjectUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subject updated",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID (code=`InvalidID`)\nInvalid teacher in charge id (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "The provided teacher in charge is not already a teacher of the subject (code=`TeacherNotInCharge`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subjects/{id}/occupancies": {
      "get": {
        "tags": [
          "subjects",
          "role-professor"
        ],
        "summary": "Gets the occupancies of a subject for the given time period.",
        "description": "Note : only users with the role `administrator`, or professors who are a teacher of the subject should be able to access this route.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Subject ID",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "start",
            "description": "Start timestamp of the occupancies",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "end",
            "description": "End timestamp of the occupancies",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "occupancies_per_day",
            "type": "integer",
            "description": "Pass 0 to return ALL the events.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Subject occupancies",
            "schema": {
              "$ref": "#/definitions/Occupancies"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "role-professor"
        ],
        "summary": "Creates a new occupancy for a given subject.",
        "description": "Note : only professors who are a teacher of the subject should be able to access this route.\nThe occupancy types `td` and `tp` should be rejected. Only classrooms that are free should be accepted. Only classes that are not (any of their groups too) in any classes at the specified time should be accepted.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Subject ID",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "OccupanciesCreationRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OccupanciesCreationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Data saved",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID (code=`InvalidID`)\nInvalid classroom ID (code=`InvalidID`)\nInvalid teacher ID (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Invalid occupancy type (code=`InvalidOccupancyType`)\nThe classroom is already occupied (code=`ClassroomAlreadyOccupied`)\nThe class (or group) is already occupied (code=`ClassOrGroupAlreadyOccupied`).\nEnd is before start (code=`EndBeforeStart`)\nThe teacher does not teach that subject (code=`TeacherDoesNotTeach`)\nThe teacher is already occupied (code=`TeacherAlreadyOccupied`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subjects/{id}/teachers": {
      "post": {
        "tags": [
          "subjects"
        ],
        "summary": "Adds new teachers to a subject using their IDs.",
        "description": "Note : only users with the role `administrator` should be able to access this route.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Subject ID",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "IDRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IDRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Teachers added.",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "subjects"
        ],
        "summary": "Removes teachers from a subject using their IDs.",
        "description": "Note : only users with the role `administrator` should be able to access this route. This request should be denied if there is less than one teacher in the subject, or if the teacher is in charge.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Subject ID",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "IDRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IDRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Teachers removed.",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Less than one teacher in charge (code=`LastTeacherInSubject`)\nThe teacher is in charge (code=`TeacherInCharge`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subjects/{id}/groups": {
      "post": {
        "tags": [
          "subjects"
        ],
        "summary": "Adds a new group to a subject.",
        "description": "Note : only users with the role `administrator` should be able to access this route. This should trigger the re-organization of groups.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Subject ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "201": {
            "description": "Group added.",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "subjects"
        ],
        "summary": "Removes a group from a subject.",
        "description": "Note : only users with the role `administrator` should be able to access this route. This should trigger the re-organisation of groups. This request should be denied if there is less than one group in the subject.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Subject ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Groups removed.",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "This is the last group for this subject (code=`LastGroupInSubject`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subjects/{id}/groups/{group_number}/occupancies": {
      "get": {
        "tags": [
          "role-professor"
        ],
        "summary": "Gets the occupancies of a subject for the given time period.",
        "description": "Note : only professors who are a teacher of the subject should be able to access this route.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Subject ID",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "group_number",
            "description": "Group number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "start",
            "description": "Start timestamp of the occupancies",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "end",
            "description": "End timestamp of the occupancies",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "occupancies_per_day",
            "type": "integer",
            "description": "Pass 0 to return ALL the events.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Group occupancies",
            "schema": {
              "$ref": "#/definitions/Occupancies"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "role-professor"
        ],
        "summary": "Creates a new occupancy for a given group of a subject.",
        "description": "Note : only professors who are a teacher of the subject should be able to access this route.\nThe only accepted occupancy types should be `td` and `tp`.\nThe classroom id should **NOT** be nullable. Only classrooms that are free should be accepted. Only groups that are not (and their class too) in any classes at the specified time should be accepted.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Subject ID",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "group_number",
            "description": "Group Number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "OccupanciesCreationRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OccupanciesCreationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Data saved",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID (code=`InvalidID`)\nInvalid classroom ID (code=`InvalidID`)\nInvalid teacher ID (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Invalid occupancy type (code=`InvalidOccupancyType`)\nThe classroom is already occupied (code=`ClassroomAlreadyOccupied`)\nThe class (or group) is already occupied (code=`ClassOrGroupAlreadyOccupied`).\nEnd is before start (code=`EndBeforeStart`)\nThe teacher does not teach that subject (code=`TeacherDoesNotTeach`)\nThe teacher is already occupied (code=`TeacherAlreadyOccupied`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/occupancies": {
      "get": {
        "tags": [
          "occupancies"
        ],
        "summary": "Gets all the occupancies for the given time period.",
        "description": "Note : only users with the role `administrator` should be able to access this route.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "Start timestamp of the occupancies",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "end",
            "description": "End timestamp of the occupancies",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "occupancies_per_day",
            "type": "integer",
            "description": "Pass 0 to return ALL the events.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Subject occupancies",
            "schema": {
              "$ref": "#/definitions/Occupancies"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/occupancies/{id}": {
      "put": {
        "tags": [
          "role-professor",
          "occupancies"
        ],
        "summary": "Update an occupancy for a given subject.",
        "description": "Note : only administrators and professors who are a teacher of the subject should be able to access this route.\nOnly classrooms that are free should be accepted. Only classes that are not (any of their groups too) in any classes at the specified time should be accepted. Only filled fields should be updated.You can't change the assigned group, or the assigned type, or the assigned subject, or the assigned teacher.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Occupancy ID",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "OccupanciesUpdateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OccupanciesUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data saved",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID (code=`InvalidID`)\nInvalid classroom ID (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "The classroom is already occupied (code=`ClassroomAlreadyOccupied`)\nThe class (or group) is already occupied (code=`ClassOrGroupAlreadyOccupied`).\nEnd is before start (code=`EndBeforeStart`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "occupancies",
          "role-professor"
        ],
        "summary": "Removes occupancies from a subject using their IDs.",
        "description": "Note : only administrators and professors who are a teacher of the subject should be able to access this route.",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Occupancy ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Occupancies removed.",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResponse"
            }
          },
          "401": {
            "description": "Invalid token (code=`InvalidCredentials`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Insufficient authorization (code=`InsufficientAuthorization`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid ID (code=`InvalidID`)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "token": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "definitions": {
    "Rank": {
      "type": "string",
      "enum": [
        "MACO",
        "PROF",
        "PRAG",
        "ATER",
        "PAST",
        "MONI"
      ]
    },
    "Role": {
      "type": "string",
      "enum": [
        "ADM",
        "TEA",
        "STU"
      ]
    },
    "OccupancyType": {
      "type": "string",
      "enum": [
        "CM",
        "TD",
        "TP",
        "PROJ",
        "ADM",
        "EXT"
      ]
    },
    "Level": {
      "type": "string",
      "enum": [
        "L1",
        "L2",
        "L3",
        "M1",
        "M2"
      ]
    },
    "ErrorResponse": {
      "type": "object",
      "required": [
        "status",
        "code"
      ],
      "properties": {
        "status": {
          "type": "string",
          "example": "error"
        },
        "code": {
          "type": "string",
          "enum": [
            "InvalidCredentials",
            "InsufficientAuthorization",
            "MalformedData",
            "InvalidOldPassword",
            "PasswordTooSimple",
            "InvalidEmail",
            "InvalidPhoneNumber",
            "InvalidRank",
            "InvalidID",
            "InvalidCapacity",
            "TeacherInCharge",
            "ClassroomUsed",
            "InvalidLevel",
            "ClassUsed",
            "StudentInClass",
            "SubjectUsed",
            "TeacherNotInCharge",
            "LastTeacherInSubject",
            "LastGroupInSubject",
            "ClassroomAlreadyOccupied",
            "ClassOrGroupAlreadyOccupied",
            "InvalidOccupancyType",
            "EndBeforeStart",
            "TeacherDoesNotTeach",
            "IllegalOccupancyType",
            "TeacherAlreadyOccupied",
            "Unknown"
          ]
        }
      }
    },
    "SimpleSuccessResponse": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string",
          "example": "success"
        }
      }
    },
    "IDRequest": {
      "type": "array",
      "items": {
        "type": "integer",
        "example": 0
      }
    },
    "Occupancies": {
      "type": "object",
      "description": "TODO",
      "required": [
        "status",
        "days"
      ],
      "properties": {
        "status": {
          "type": "string",
          "example": "success"
        },
        "days": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "date",
              "occupancies"
            ],
            "properties": {
              "date": {
                "type": "string",
                "example": "01-05-2020"
              },
              "occupancies": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "id",
                    "classroom_name",
                    "group_name",
                    "subject_name",
                    "teacher_name",
                    "start",
                    "end",
                    "occupancy_type",
                    "class_name",
                    "name"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 0
                    },
                    "classroom_name": {
                      "type": "string",
                      "example": "B.001"
                    },
                    "group_name": {
                      "type": "string",
                      "example": "Groupe 1"
                    },
                    "subject_name": {
                      "type": "string",
                      "example": "Algorithmique"
                    },
                    "teacher_name": {
                      "type": "string",
                      "example": "mylan chevalier"
                    },
                    "start": {
                      "type": "integer",
                      "example": 1587776227
                    },
                    "end": {
                      "type": "integer",
                      "example": 1587779827
                    },
                    "occupancy_type": {
                      "$ref": "#/definitions/OccupancyType"
                    },
                    "class_name": {
                      "type": "string",
                      "example": "L3 Informatique"
                    },
                    "name": {
                      "type": "string",
                      "example": "Algorithmique CM Groupe 1"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "AccountCreatedResponse": {
      "type": "object",
      "required": [
        "status",
        "username",
        "password"
      ],
      "properties": {
        "status": {
          "type": "string",
          "example": "success"
        },
        "username": {
          "type": "string",
          "example": "azure_diamong"
        },
        "password": {
          "type": "string",
          "example": "n5l*2#01@"
        }
      }
    },
    "LoginRequest": {
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "username": {
          "type": "string",
          "example": "azure_diamond"
        },
        "password": {
          "type": "string",
          "example": "hunter2"
        }
      }
    },
    "SuccessfulLoginResponse": {
      "type": "object",
      "required": [
        "status",
        "token"
      ],
      "properties": {
        "status": {
          "type": "string",
          "example": "success"
        },
        "token": {
          "type": "string",
          "example": "...."
        },
        "user": {
          "type": "object",
          "required": [
            "id",
            "first_name",
            "last_name",
            "kind"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "example": 0
            },
            "first_name": {
              "type": "string"
            },
            "last_name": {
              "type": "string"
            },
            "kind": {
              "$ref": "#/definitions/Role"
            }
          }
        }
      }
    },
    "ProfileUpdateRequest": {
      "type": "object",
      "required": [
        "old_password",
        "password"
      ],
      "properties": {
        "old_password": {
          "type": "string",
          "example": "12345"
        },
        "password": {
          "type": "string",
          "example": "54321"
        }
      }
    },
    "ProfileRecentModifications": {
      "type": "object",
      "required": [
        "status",
        "modifications"
      ],
      "properties": {
        "status": {
          "type": "string",
          "example": "success"
        },
        "modifications": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "modification_type",
              "modification_timestamp",
              "occupancy"
            ],
            "properties": {
              "modification_type": {
                "type": "string",
                "enum": [
                  "CREATE",
                  "EDIT",
                  "DELETE"
                ]
              },
              "modification_timestamp": {
                "type": "integer",
                "example": 1587987080
              },
              "occupancy": {
                "type": "object",
                "required": [
                  "subject_name",
                  "class_name",
                  "occupancy_type",
                  "occupancy_start",
                  "occupancy_end",
                  "previous_occupancy_start",
                  "previous_occupancy_end"
                ],
                "properties": {
                  "subject_name": {
                    "type": "string",
                    "example": "PPPE (nullable if external)"
                  },
                  "class_name": {
                    "type": "string",
                    "example": "L3 Informatique (nullable if external)"
                  },
                  "occupancy_type": {
                    "$ref": "#/definitions/OccupancyType"
                  },
                  "occupancy_start": {
                    "type": "integer",
                    "example": 1587987080
                  },
                  "occupancy_end": {
                    "type": "integer",
                    "example": 1587987080
                  },
                  "previous_occupancy_start": {
                    "description": "Only for the edition modification_type",
                    "type": "integer",
                    "example": 1587987080
                  },
                  "previous_occupancy_end": {
                    "description": "Only for the edition modification_type",
                    "type": "integer",
                    "example": 1587987080
                  }
                }
              }
            }
          }
        }
      }
    },
    "TeacherListResponse": {
      "type": "object",
      "required": [
        "status",
        "total",
        "teachers"
      ],
      "properties": {
        "status": {
          "type": "string",
          "example": "success"
        },
        "total": {
          "type": "integer",
          "example": 100,
          "description": "Total number of teachers."
        },
        "teachers": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "id",
              "first_name",
              "last_name",
              "email",
              "phone_number"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "example": 0
              },
              "first_name": {
                "type": "string",
                "example": "mylan"
              },
              "last_name": {
                "type": "string",
                "example": "chevalier"
              },
              "email": {
                "type": "string",
                "example": "nathan.roberts@example.com"
              },
              "phone_number": {
                "type": "string",
                "example": "06 71 55 50 11"
              }
            }
          }
        }
      }
    },
    "TeacherCreationRequest": {
      "type": "object",
      "required": [
        "first_name",
        "last_name",
        "email",
        "phone_number",
        "rank"
      ],
      "properties": {
        "first_name": {
          "type": "string",
          "example": "mylan"
        },
        "last_name": {
          "type": "string",
          "example": "chevalier"
        },
        "email": {
          "type": "string",
          "example": "nathan.roberts@example.com"
        },
        "phone_number": {
          "type": "string",
          "example": "06 71 55 50 11"
        },
        "rank": {
          "$ref": "#/definitions/Rank"
        }
      }
    },
    "TeacherResponse": {
      "type": "object",
      "required": [
        "status",
        "teacher"
      ],
      "properties": {
        "status": {
          "type": "string",
          "example": "success"
        },
        "teacher": {
          "type": "object",
          "required": [
            "first_name",
            "last_name",
            "username",
            "email",
            "phone_number",
            "rank",
            "total_service",
            "services"
          ],
          "properties": {
            "first_name": {
              "type": "string",
              "example": "Mylan"
            },
            "last_name": {
              "type": "string",
              "example": "Chevalier"
            },
            "username": {
              "type": "string",
              "example": "road.buddy"
            },
            "email": {
              "type": "string",
              "example": "road.buddy@etu.univ-ac.edu"
            },
            "phone_number": {
              "type": "string",
              "example": "06 71 55 50 11"
            },
            "rank": {
              "$ref": "#/definitions/Rank"
            },
            "total_service": {
              "type": "integer",
              "example": "58"
            },
            "services": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "class",
                  "cm",
                  "project",
                  "td",
                  "tp",
                  "administration",
                  "external"
                ],
                "properties": {
                  "class": {
                    "type": "string",
                    "example": "L1 Informatique"
                  },
                  "cm": {
                    "type": "integer",
                    "example": 12
                  },
                  "project": {
                    "type": "integer",
                    "example": "0"
                  },
                  "td": {
                    "type": "integer",
                    "example": "6"
                  },
                  "tp": {
                    "type": "integer",
                    "example": "6"
                  },
                  "administration": {
                    "type": "integer",
                    "example": 5
                  },
                  "external": {
                    "type": "integer",
                    "example": 0
                  }
                }
              }
            }
          }
        }
      }
    },
    "TeacherUpdateRequest": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "example": "mylan"
        },
        "last_name": {
          "type": "string",
          "example": "chevalier"
        },
        "email": {
          "type": "string",
          "example": "road.buddy@etu.univ-ac.edu"
        },
        "phone_number": {
          "type": "string",
          "example": "06 71 55 50 11"
        },
        "rank": {
          "$ref": "#/definitions/Rank"
        },
        "password": {
          "type": "string",
          "example": "newpassword"
        }
      }
    },
    "TeacherSubjects": {
      "type": "object",
      "required": [
        "status",
        "subjects"
      ],
      "properties": {
        "status": {
          "type": "string",
          "example": "success"
        },
        "subjects": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "id",
              "name",
              "class_name",
              "teachers",
              "groups"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "example": 0
              },
              "name": {
                "type": "string",
                "example": "PPPE"
              },
              "class_name": {
                "type": "string",
                "example": "L3 Informatique"
              },
              "teachers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "first_name",
                    "last_name",
                    "in_charge",
                    "email",
                    "phone_number"
                  ],
                  "properties": {
                    "first_name": {
                      "type": "string",
                      "example": "Butch"
                    },
                    "last_name": {
                      "type": "string",
                      "example": "Cranky"
                    },
                    "in_charge": {
                      "type": "boolean",
                      "example": true
                    },
                    "email": {
                      "type": "string",
                      "example": "butch.cranky@nook.mail"
                    },
                    "phone_number": {
                      "type": "string",
                      "example": "06 71 55 50 11"
                    }
                  }
                }
              },
              "groups": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "number",
                    "name",
                    "count"
                  ],
                  "properties": {
                    "number": {
                      "type": "integer",
                      "example": 0
                    },
                    "name": {
                      "type": "string",
                      "example": "Groupe 1"
                    },
                    "count": {
                      "type": "integer",
                      "example": 22
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ClassroomsList": {
      "type": "object",
      "required": [
        "status",
        "total",
        "classrooms"
      ],
      "properties": {
        "status": {
          "type": "string",
          "example": "success"
        },
        "total": {
          "type": "integer",
          "example": 100
        },
        "classrooms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Classroom"
          }
        }
      }
    },
    "Classroom": {
      "type": "object",
      "required": [
        "id",
        "name",
        "capacity"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "example": 0
        },
        "name": {
          "type": "string",
          "example": "B.001"
        },
        "capacity": {
          "type": "integer",
          "example": 50
        }
      }
    },
    "ClassroomCreationRequest": {
      "type": "object",
      "required": [
        "name",
        "capacity"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "B.001"
        },
        "capacity": {
          "type": "integer",
          "example": 50
        }
      }
    },
    "ClassroomGetResponse": {
      "type": "object",
      "required": [
        "status",
        "classroom"
      ],
      "properties": {
        "status": {
          "type": "string",
          "example": "success"
        },
        "classroom": {
          "$ref": "#/definitions/Classroom"
        }
      }
    },
    "ClassroomUpdateRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "B.001"
        }
      }
    },
    "ClassesList": {
      "type": "object",
      "required": [
        "status",
        "total",
        "classes"
      ],
      "properties": {
        "status": {
          "type": "string",
          "example": "success"
        },
        "total": {
          "type": "integer",
          "example": 0
        },
        "classes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClassWithId"
          }
        }
      }
    },
    "ClassWithId": {
      "type": "object",
      "required": [
        "id",
        "name",
        "level"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "example": 0
        },
        "name": {
          "type": "string",
          "example": "L3 Informatique"
        },
        "level": {
          "$ref": "#/definitions/Level"
        }
      }
    },
    "Class": {
      "type": "object",
      "required": [
        "name",
        "level"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "L3 Informatique"
        },
        "level": {
          "$ref": "#/definitions/Level"
        }
      }
    },
    "ClassResponse": {
      "type": "object",
      "required": [
        "status",
        "class",
        "total_service"
      ],
      "properties": {
        "status": {
          "type": "string",
          "example": "success"
        },
        "class": {
          "$ref": "#/definitions/Class"
        },
        "total_service": {
          "type": "integer",
          "example": 56
        }
      }
    },
    "ClassUpdateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "L3 Informatique"
        },
        "level": {
          "$ref": "#/definitions/Level"
        }
      }
    },
    "StudentListResponse": {
      "type": "object",
      "required": [
        "status",
        "total",
        "students"
      ],
      "properties": {
        "status": {
          "type": "string",
          "example": "success"
        },
        "total": {
          "type": "integer",
          "example": 100,
          "description": "Total number of students."
        },
        "students": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "id",
              "first_name",
              "last_name",
              "class_name"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "example": 0
              },
              "first_name": {
                "type": "string",
                "example": "Fabien"
              },
              "last_name": {
                "type": "string",
                "example": "Vidal"
              },
              "class_name": {
                "type": "string",
                "example": "L3 Informatique"
              }
            }
          }
        }
      }
    },
    "StudentCreationRequest": {
      "type": "object",
      "required": [
        "first_name",
        "last_name",
        "class_id"
      ],
      "properties": {
        "first_name": {
          "type": "string",
          "example": "fabien"
        },
        "last_name": {
          "type": "string",
          "example": "Vidal"
        },
        "class_id": {
          "type": "integer",
          "example": 0
        }
      }
    },
    "StudentResponse": {
      "type": "object",
      "required": [
        "status",
        "student"
      ],
      "properties": {
        "status": {
          "type": "string",
          "example": "success"
        },
        "student": {
          "type": "object",
          "required": [
            "first_name",
            "last_name",
            "username",
            "total_hours",
            "subjects"
          ],
          "properties": {
            "first_name": {
              "type": "string",
              "example": "Fabien"
            },
            "last_name": {
              "type": "string",
              "example": "Vidal"
            },
            "username": {
              "type": "string",
              "example": "road.buddy"
            },
            "total_hours": {
              "type": "integer",
              "example": "58"
            },
            "subjects": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "name",
                  "group"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Anglais"
                  },
                  "group": {
                    "type": "string",
                    "example": "Groupe 1"
                  }
                }
              }
            }
          }
        }
      }
    },
    "StudentUpdateRequest": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "example": "mylan"
        },
        "last_name": {
          "type": "string",
          "example": "chevalier"
        },
        "class_id": {
          "type": "integer",
          "example": 0
        },
        "password": {
          "type": "string",
          "example": "newpassword"
        }
      }
    },
    "StudentSubjects": {
      "type": "object",
      "required": [
        "status",
        "subjects"
      ],
      "properties": {
        "status": {
          "type": "string",
          "example": "success"
        },
        "subjects": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name",
              "class_name",
              "teachers",
              "groups"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "PPPE"
              },
              "class_name": {
                "type": "string",
                "example": "L3 Informatique"
              },
              "teachers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "first_name",
                    "last_name",
                    "in_charge",
                    "email",
                    "phone_number"
                  ],
                  "properties": {
                    "first_name": {
                      "type": "string",
                      "example": "Butch"
                    },
                    "last_name": {
                      "type": "string",
                      "example": "Cranky"
                    },
                    "in_charge": {
                      "type": "boolean",
                      "example": true
                    },
                    "email": {
                      "type": "string",
                      "example": "butch.cranky@nook.mail"
                    },
                    "phone_number": {
                      "type": "string",
                      "example": "06 71 55 50 11"
                    }
                  }
                }
              },
              "groups": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "name",
                    "count",
                    "is_student_group"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Groupe 1"
                    },
                    "count": {
                      "type": "integer",
                      "example": 22
                    },
                    "is_student_group": {
                      "type": "boolean",
                      "example": false
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "SubjectListResponse": {
      "type": "object",
      "required": [
        "status",
        "total",
        "subjects"
      ],
      "properties": {
        "status": {
          "type": "string",
          "example": "success"
        },
        "total": {
          "type": "integer",
          "example": 100,
          "description": "Total number of students."
        },
        "subjects": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "id",
              "class_name",
              "name"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "example": 0
              },
              "class_name": {
                "type": "string",
                "example": "L3 Informatique"
              },
              "name": {
                "type": "string",
                "example": "PPPE"
              }
            }
          }
        }
      }
    },
    "Subject": {
      "type": "object",
      "required": [
        "name",
        "class_id",
        "teacher_in_charge_id"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "PPPE"
        },
        "class_id": {
          "type": "integer",
          "example": 0
        },
        "teacher_in_charge_id": {
          "type": "integer",
          "example": 0
        }
      }
    },
    "SubjectUpdateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "PPPE"
        },
        "teacher_in_charge_id": {
          "type": "integer",
          "example": 0
        }
      }
    },
    "SubjectResponse": {
      "type": "object",
      "required": [
        "status",
        "subject"
      ],
      "properties": {
        "status": {
          "type": "string",
          "example": "success"
        },
        "subject": {
          "type": "object",
          "required": [
            "name",
            "class_name",
            "total_hours"
          ],
          "properties": {
            "name": {
              "type": "string",
              "example": "PPPE"
            },
            "class_name": {
              "type": "string",
              "example": "L3 Informatique"
            },
            "total_hours": {
              "type": "integer",
              "example": 50
            },
            "teachers": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "id",
                  "first_name",
                  "last_name",
                  "in_charge"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 0
                  },
                  "first_name": {
                    "type": "string",
                    "example": "Mylan"
                  },
                  "last_name": {
                    "type": "string",
                    "example": "Chevalier"
                  },
                  "in_charge": {
                    "type": "boolean",
                    "example": true
                  }
                }
              }
            },
            "groups": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "id",
                  "name",
                  "count"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 0
                  },
                  "name": {
                    "type": "string",
                    "example": "Groupe 1"
                  },
                  "count": {
                    "type": "integer",
                    "example": 22
                  }
                }
              }
            }
          }
        }
      }
    },
    "OccupanciesCreationRequest": {
      "type": "object",
      "required": [
        "classroom_id",
        "start",
        "end",
        "name",
        "occupancy_type",
        "teacher_id"
      ],
      "properties": {
        "classroom_id": {
          "type": "integer",
          "example": 0
        },
        "start": {
          "type": "integer",
          "example": 1587776227
        },
        "end": {
          "type": "integer",
          "example": 1587779827
        },
        "name": {
          "type": "string",
          "example": "nom du cours"
        },
        "occupancy_type": {
          "$ref": "#/definitions/OccupancyType"
        },
        "teacher_id": {
          "type": "integer",
          "example": 0
        }
      }
    },
    "OccupanciesUpdateRequest": {
      "type": "object",
      "properties": {
        "classroom_id": {
          "type": "string",
          "example": "nullable"
        },
        "start": {
          "type": "integer",
          "example": 1587776227
        },
        "end": {
          "type": "integer",
          "example": 1587779827
        },
        "name": {
          "type": "string",
          "example": "nom du cours"
        }
      }
    },
    "ICALFeed": {
      "type": "object",
      "required": [
        "status",
        "url"
      ],
      "properties": {
        "status": {
          "type": "string",
          "example": "success"
        },
        "url": {
          "type": "string",
          "example": "http://localhost:3030/api/feeds/ical/$TOKEN"
        }
      }
    }
  }
}